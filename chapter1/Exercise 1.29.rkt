#lang sicp
(define (simpson-integral f a b n)
    (define (sum f a b next)
        (if (> a b)
            0
            (+  (f a)
                (sum f (next a) b next))
            ))
    (define (even? x)
        (=  (remainder x 2)
            0))
    (define (h)
        (/  (- b a)
            n))
    (define (y k)
        (f (+ a (* k (h)))))
    (define (term k)
        (cond   ((= k 0) (y 0))
                ((= k n) (y n))
                ((even? k) (* 2 (y k)))
                (else (* 4 (y k))))
        )
    (define (next k)
        (+ k 1))
    (*  (/ (h) 3)
        (sum term 0 n next))
)
(define (cube x)
    (* x x x))

(simpson-integral cube 0 1 10000)